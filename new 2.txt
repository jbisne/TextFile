package com.project.bluemarket.service;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.ResourceUtils;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.project.bluemarket.Dao.IBoardDao;
import com.project.bluemarket.Dto.BDto;

@Service
public class BoardServiceImpl implements BoardService
{	
	@Value("${upload.path}")
	private String uploadPath;
	@Autowired
	HttpSession session;
	@Autowired
	IBoardDao Bdao;
	
	@Override
	public List<BDto> infoList(){
		return Bdao.infoList();	
	}
	@Override
	public List<BDto> favorList(){
		return Bdao.favorList();	
	}
	@Override
	public List<BDto> sellList(){
		return Bdao.sellList();	
	}
	@Override
	public List<BDto> list(){
		return Bdao.list();	
	}
	@Override
	public List<BDto> categoryList(String category){
		System.out.println("Bposition:"+ category);
		return Bdao.categoryList(category);	
	}
	@Override 
	public List<BDto>searchList(String search){
		System.out.println("Bsearch:" + search);
		return Bdao.searchList("%"+search+"%");
	}
	
	@Override
	public List<BDto>selectList(HttpServletRequest request) {
		String mname = request.getParameter("mname");
		return Bdao.selectList(mname);
	}
	
	@Override
	public List<BDto> sellView(HttpServletRequest request){
		int BID = Integer.parseInt(request.getParameter("BID"));
		System.out.println("sellView:"+BID);
		return Bdao.sellView(BID);	
	}
	
	
	@Override
	public int writeAction(HttpServletRequest request) {
		System.out.println("writeAction");
		int result = 0;
		try {
						
			// 서버의 물리적경로 가져오기
			String path = ResourceUtils.getFile(uploadPath).toPath().toString();
			System.out.println(path);
            /*
			 * 파일업로드 위한 MultipartHttpServletRequest객체 생성
			 * 객체 생성과 동시에 파일업로드 완료됨. 
			 * 나머지 폼값은 Multipart가 통째로 받아서 처리한다.
			 */
			MultipartHttpServletRequest mhsr = (MultipartHttpServletRequest) request;
			
			// 업로드폼의 file속성 필드의 이름을 모두 읽음
			Iterator<String> itr = mhsr.getFileNames();
			
			MultipartFile mfile = null;			
			String fileName = "";		
			
			// 파일 하나의 정보를 저장하기 위한 List타입의 변수(원본파일명, 저장된파일명 등)
			List resultList = new ArrayList();
						
			// 폼값받기
//			String BID = mhsr.getParameter("bId"); //글번호는sql에서 시퀀스로 입력
			String BCOST = mhsr.getParameter("bCost");				//가격
			String BTITLE = mhsr.getParameter("bTitle");				//제목
			String BNAME = (String)session.getAttribute("mName");		//작성자 닉네임
			String BCONTENT = mhsr.getParameter("bContent");			//글내용
			String BLOCATION = mhsr.getParameter("mAddress") + "/" + mhsr.getParameter("mDetailAddress"); //거래희망지역
//			String BXLOC, BYLOC = 보류
			System.out.println(BLOCATION);
			String BIMAGE1 = "";
			String BTHUMBIMG1 = "";
			String BIMAGE2 = "";
			String BIMAGE3 = "";
			String BIMAGE4 = "";
			
			String BCATEGORY = mhsr.getParameter("bCategory");
			String BPOSITION = mhsr.getParameter("bPosition");
			String BTRADEOK = mhsr.getParameter("bTradeOk");
			String BPRODUCT = mhsr.getParameter("bProduct");			
			
			String[] str = new String[4];
			int i=0;
			// 업로드폼의 file속성의 필드의 갯수만큼 반복
			while (itr.hasNext()) {
				
				// userfile1, userfile2....출력됨
				fileName = (String)itr.next();
				System.out.println("filename = " + fileName);	
				
				// 서버로 업로드된 임시파일명 가져옴
				mfile = mhsr.getFile(fileName);
				//System.out.println(mfile);//CommonsMultipartFile@1366c0b 형태임
				
				// 한글깨짐방지 처리 후 업로드된 파일명을 가져온다.
				String originalName = 
					//mfile.getOriginalFilename();
				    new String(mfile.getOriginalFilename().getBytes(),"UTF-8"); // Linux
				System.out.println("upload:"+originalName);
				
				// 파일명이 공백이라면 while문의 처음으로 돌아간다.
				if("".equals(originalName)){
					continue;
				}
				//System.out.println("originalName:"+originalName);

				// 파일명에서 확장자 가져오기
//					String ext = originalName.substring(originalName.lastIndexOf('.'));
				
				// 파일명을 UUID로 생성된값으로 변경함.
//					String saveFileName = getUuid() + ext;
				String saveFileName = getUuid() + "." + originalName;
				System.out.println(saveFileName);
				// 설정한 경로에 파일저장
				File serverFullName = new File(path + File.separator + saveFileName);
				String a = path + File.separator + saveFileName;
				
				// 업로드한 파일을 지정한 파일에 저장한다.
				mfile.transferTo(serverFullName);
				
				str[i] = saveFileName;
				if(i == 0) {
					BIMAGE1 = str[i];
					String tempThumb = makeThumbNailImage(path, saveFileName);
					BTHUMBIMG1 = tempThumb;
									
				}else if(i == 1) {
					BIMAGE2 = str[i];
				}else if(i == 2) {
					BIMAGE3 = str[i];
					
				}else if(i == 3) {
					BIMAGE4 = str[i];
					
				}
				i++;
				
//				Map file = new HashMap();
//				file.put("originalName", originalName);    //원본파일명
//				file.put("saveFileName", saveFileName);    //저장된파일명
//				file.put("serverFullName", serverFullName);//서버에 저장된 전체경로 및 파일명
//				//file.put("title", title);                  //타이틀
//				
//				// 위 파일의 정보를 담은 Map을 List에 저장
//				resultList.add(file);
			}
//			String mOriginalName = originalName;
//			String mSaveFileName = saveFileName;
		
//			dao.goodsWrite(BCOST, BTITLE, BNAME, BCONTENT, BLOCATION, BIMAGE1, BTHUMBIMG1,
//					BIMAGE2, BTHUMBIMG2, BCATEGORY, BPOSITION, BTRADEOK, BPRODUCT);

			
//			result = dao.goodsWrite(BCOST, BTITLE, BNAME, BCONTENT, BLOCATION, BIMAGE1, BTHUMBIMG1,
//					BIMAGE2, BIMAGE3, BIMAGE4, BCATEGORY, BPOSITION, BTRADEOK, BPRODUCT);
			if(BIMAGE1.equals("") || BIMAGE1 == null) {
				BIMAGE1 = "nimage.png";
			}
			if(BTHUMBIMG1.equals("") || BTHUMBIMG1 == null) {
				BTHUMBIMG1 = "nimage.png";
			}
			if(BIMAGE2.equals("") || BIMAGE2 == null) {
				BIMAGE2 = "nimage.png";
			}
			if(BIMAGE3.equals("") || BIMAGE3 == null) {
				BIMAGE3 = "nimage.png";
			}
			if(BIMAGE4.equals("") || BIMAGE4 == null) {
				BIMAGE4 = "nimage.png";
			}
			
			System.out.println("BIMAGE1 : " + BIMAGE1);
			System.out.println("BTHUMBIMG1 : " + BIMAGE1);
			System.out.println("BIMAGE2 : " + BIMAGE2);
			System.out.println("BIMAGE3 : " + BIMAGE3);
			System.out.println("BIMAGE4 : " + BIMAGE4);
			
			result = Bdao.goodsWrite(BCOST, BTITLE, BNAME, BCONTENT, BLOCATION, BIMAGE1, BTHUMBIMG1,
					BIMAGE2, BIMAGE3, BIMAGE4, BCATEGORY, BPOSITION, BTRADEOK, BPRODUCT);

			//returnObj.put("files", resultList);
		} catch(UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch(IllegalStateException e) {
			e.printStackTrace();
		} catch(IOException e) {
			e.printStackTrace();
		}
		
		//model.addAttribute("returnObj", returnObj);	
		//String json_data = "{\"code\":\"가입 성공\", \"desc\":\"가입한 메일로 인증을 하셔야 가입완료됩니다.\"}";

		//obj.put("msg", msg);
		//obj.put("url", url);
		//model.addAttribute("msg", msg);
		//model.addAttribute("url", url);
		
		//return obj;
		return result;
	}
	
	public String makeThumbNailImage(String imgUrl, String saveFileName) {

		String thumbName = "t" + saveFileName;
		try {
            //썸네일 가로사이즈
            int thumbnail_width = 200;
            //썸네일 세로사이즈
            int thumbnail_height = 200;
            //원본이미지파일의 경로+파일명
            String full = imgUrl +File.separator+ saveFileName;
            String path = ResourceUtils.getFile(uploadPath).toPath().toString();
            
            System.out.println(full);
            //원본이미지파일의 경로+파일명
            File origin_file_name = new File(full);
            System.out.println("ok1");
            //생성할 썸네일파일의 경로+썸네일파일명
            File thumb_file_name = new File(imgUrl +File.separator+ "t"+ saveFileName);
            System.out.println("ok2");
            BufferedImage buffer_original_image = ImageIO.read(origin_file_name);
            BufferedImage buffer_thumbnail_image = new BufferedImage(thumbnail_width, thumbnail_height, BufferedImage.TYPE_3BYTE_BGR);
            Graphics2D graphic = buffer_thumbnail_image.createGraphics();
            graphic.drawImage(buffer_original_image, 0, 0, thumbnail_width, thumbnail_height, null);
            ImageIO.write(buffer_thumbnail_image, "jpg", thumb_file_name);
            System.out.println("썸네일 생성완료");
        } catch (Exception e) {
            e.printStackTrace();
        }

		return thumbName;
	}
	
	public static String getUuid(){
		String uuid = UUID.randomUUID().toString();
		//System.out.println(uuid);		
		uuid = uuid.replaceAll("-", "");
		//System.out.println("생성된UUID:"+ uuid);
		return uuid;
	}
	@Override
	public int modify(HttpServletRequest request) {
		System.out.println("Modify Action");
		
		int result = 0;
		try {
						
			// 서버의 물리적경로 가져오기
			String path = ResourceUtils.getFile(uploadPath).toPath().toString();
			System.out.println(path);
            /*
			 * 파일업로드 위한 MultipartHttpServletRequest객체 생성
			 * 객체 생성과 동시에 파일업로드 완료됨. 
			 * 나머지 폼값은 Multipart가 통째로 받아서 처리한다.
			 */
			MultipartHttpServletRequest mhsr = (MultipartHttpServletRequest) request;
			
			// 업로드폼의 file속성 필드의 이름을 모두 읽음
			Iterator<String> itr = mhsr.getFileNames();
			
			MultipartFile mfile = null;			
			String fileName = "";		
			
			// 파일 하나의 정보를 저장하기 위한 List타입의 변수(원본파일명, 저장된파일명 등)
			List resultList = new ArrayList();
						
			// 폼값받기
//			String BID = mhsr.getParameter("bId"); //글번호는sql에서 시퀀스로 입력
			int BID = Integer.parseInt(mhsr.getParameter("BID"));
			String BCOST = mhsr.getParameter("bCost");				//가격
			String BTITLE = mhsr.getParameter("bTitle");				//제목
			String BNAME = mhsr.getParameter("BNAME");		//작성자 닉네임
			String BCONTENT = mhsr.getParameter("bContent");			//글내용
			String BLOCATION = mhsr.getParameter("mAddress") + "/" + mhsr.getParameter("mDetailAddress"); //거래희망지역
//			String BXLOC, BYLOC = 보류
			System.out.println(BLOCATION);
			String BIMAGE1 = "";
			String BTHUMBIMG1 = "";
			String BIMAGE2 = "";
			String BIMAGE3 = "";
			String BIMAGE4 = "";
			
			String BCATEGORY = mhsr.getParameter("bCategory");
			String BPOSITION = mhsr.getParameter("bPosition");
			String BTRADEOK = mhsr.getParameter("bTradeOk");
			String BPRODUCT = mhsr.getParameter("bProduct");			
			
			String[] str = new String[4];
			int i=0;
			// 업로드폼의 file속성의 필드의 갯수만큼 반복
			while (itr.hasNext()) {
				
				// userfile1, userfile2....출력됨
				fileName = (String)itr.next();
				System.out.println("filename = " + fileName);	
				
				// 서버로 업로드된 임시파일명 가져옴
				mfile = mhsr.getFile(fileName);
				//System.out.println(mfile);//CommonsMultipartFile@1366c0b 형태임
				
				// 한글깨짐방지 처리 후 업로드된 파일명을 가져온다.
				String originalName = 
					//mfile.getOriginalFilename();
				    new String(mfile.getOriginalFilename().getBytes(),"UTF-8"); // Linux
				System.out.println("upload:"+originalName);
				
				// 파일명이 공백이라면 while문의 처음으로 돌아간다.
				if("".equals(originalName)){
					continue;
				}

				String saveFileName = getUuid() + "." + originalName;
				System.out.println(saveFileName);
				// 설정한 경로에 파일저장
				File serverFullName = new File(path + File.separator + saveFileName);
				String a = path + File.separator + saveFileName;
				
				// 업로드한 파일을 지정한 파일에 저장한다.
				mfile.transferTo(serverFullName);
				
				str[i] = saveFileName;
				if(i == 0) {
					BIMAGE1 = str[i];
					String tempThumb = makeThumbNailImage(path, saveFileName);
					BTHUMBIMG1 = tempThumb;
									
				}else if(i == 1) {
					BIMAGE2 = str[i];
				}else if(i == 2) {
					BIMAGE3 = str[i];
					
				}else if(i == 3) {
					BIMAGE4 = str[i];
					
				}
				i++;
				
			}

			
			List<BDto> dtos = Bdao.sellView(BID);
			System.out.println("check1");
			if(BIMAGE1.equals("") || BIMAGE1 == null) {
				BIMAGE1 = dtos.get(0).getBIMAGE1();
			}
			if(BTHUMBIMG1.equals("") || BTHUMBIMG1 == null) {
				BTHUMBIMG1 = dtos.get(0).getBTHUMBIMG1();
			}
			if(BIMAGE2.equals("") || BIMAGE2 == null) {
				BIMAGE2 = dtos.get(0).getBIMAGE2();
			}
			if(BIMAGE3.equals("") || BIMAGE3 == null) {
				BIMAGE3 = dtos.get(0).getBIMAGE3();
			}
			if(BIMAGE4.equals("") || BIMAGE4 == null) {
				BIMAGE4 = dtos.get(0).getBIMAGE4();
			}
			
			System.out.println("BIMAGE1 : " + BIMAGE1);
			System.out.println("BTHUMBIMG1 : " + BTHUMBIMG1);
			System.out.println("BIMAGE2 : " + BIMAGE2);
			System.out.println("BIMAGE3 : " + BIMAGE3);
			System.out.println("BIMAGE4 : " + BIMAGE4);
			
			result = Bdao.modify(BID, BCOST, BTITLE, BNAME, BCONTENT, BLOCATION, BIMAGE1, BTHUMBIMG1,
					BIMAGE2, BIMAGE3, BIMAGE4, BCATEGORY, BPOSITION, BTRADEOK, BPRODUCT);
			System.out.println("check2");	
		} catch(UnsupportedEncodingException e) {
			e.printStackTrace();
		} catch(IllegalStateException e) {
			e.printStackTrace();
		} catch(IOException e) {
			e.printStackTrace();
		}

		return result;
	}
	@Override
	public void delete(HttpServletRequest request) {
		int BID = Integer.parseInt(request.getParameter("BID"));
		Bdao.delete(BID);
	}
	@Override
	public String translation(HttpServletRequest request) {
		System.out.println("post 메서드");
		
		//번역할 text 값 받아오기
		String original_str = (String)request.getParameter("bContent");
		String source = "ko";
		String target = (String)request.getParameter("target");
		String result = (String)nmtReturnResult(original_str, source, target);
		
		System.out.println(original_str + source + target);
		
		return result;
	}

	public String nmtReturnResult(String original_str, String source, String target) {
		
		//애플리케이션 클라리언트 아이디값;
		String clientId = "1qsH2GcIpcDoSc5JxhvM";
		// 시크릿값
		String clientSecret = "7U6YqO5HW8";
		
		String resultString = "";
		
		try {
			//original_str 값이 우리가 변환할 값
			String text = URLEncoder.encode(original_str, "UTF-8");
			
            String apiURL = "https://openapi.naver.com/v1/papago/n2mt";
            URL url = new URL(apiURL);
            HttpURLConnection con = (HttpURLConnection)url.openConnection();
            con.setRequestMethod("POST");
            con.setRequestProperty("X-Naver-Client-Id", clientId);
            con.setRequestProperty("X-Naver-Client-Secret", clientSecret);
            // post request
            String postParams = "source="+source+"&target="+target+"&text=" + text;
            con.setDoOutput(true);
            DataOutputStream wr = new DataOutputStream(con.getOutputStream());
            wr.writeBytes(postParams);
            wr.flush();
            wr.close();
            int responseCode = con.getResponseCode();
            BufferedReader br;
            if(responseCode==200) { // 정상 호출
                br = new BufferedReader(new InputStreamReader(con.getInputStream()));
            } else {  // 에러 발생
                br = new BufferedReader(new InputStreamReader(con.getErrorStream()));
            }
            String inputLine;
            StringBuffer response = new StringBuffer();
            while ((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }
            br.close();
            System.out.println(response.toString());
            resultString = response.toString();
        } catch (Exception e) {
            System.out.println(e);
        }
		return resultString;
    } 
	///////////////////////////////////////////////service///////////////////////////////////////////////////
	
	@Override
	public List<BDto> SinfoList() {
		List<BDto> dtos = Bdao.SinfoList();
		return dtos;
	}
	
	@Override
	public List<BDto> getInfo(HttpServletRequest request){
		int BID = Integer.parseInt(request.getParameter("BID"));
		List<BDto> dtos = Bdao.getInfo(BID);
		return dtos;
	}
	
	@Override
	public List<BDto> myQNAList(){
		String mName = (String)session.getAttribute("mName");
		List<BDto> dtos = Bdao.myQNAList(mName);
		return dtos;
	}
	
	@Override
	public void QNAwrite(HttpServletRequest request) {
		String BTITLE = request.getParameter("BTITLE");
		String BCONTENT = request.getParameter("BCONTENT");
		String BNAME = (String)session.getAttribute("mName");
		Bdao.QNAwrite(BTITLE, BCONTENT, BNAME);
	}
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	////////////////////////////////////////////////admin////////////////////////////////////////////////////
	
	@Override
	public List<BDto> boardList(){
		List<BDto> dtos = Bdao.boardList();
		return dtos;
	}
	
	@Override
	public  List<BDto> QList(){
		List<BDto> dtos = Bdao.QList();
		return dtos;
	}
	
	@Override
	public List<BDto> adminTboard(HttpServletRequest request){
		String category = request.getParameter("category");
		String searchcode = request.getParameter("searchcode");
		List<BDto> dtos = Bdao.adminTboard(category, "%"+searchcode+"%");
		return dtos;
	}
	
	@Override
	public List<BDto> adminNboard(HttpServletRequest request){
		String category = request.getParameter("category");
		String searchcode = request.getParameter("searchcode");
		List<BDto> dtos = Bdao.adminNboard(category, "%"+searchcode+"%");
		return dtos;
	}
	
	@Override
	public List<BDto> adminCboard(HttpServletRequest request){
		String category = request.getParameter("category");
		String searchcode = request.getParameter("searchcode");
		List<BDto> dtos = Bdao.adminCboard(category, "%"+searchcode+"%");
		return dtos;
	}
	
	@Override
	public void confirmWrite(HttpServletRequest request) {
		String BTITLE = request.getParameter("BTITLE");
		String BCONTENT = request.getParameter("BCONTENT");
		Bdao.confirmWrite(BTITLE, BCONTENT, "관리자");
	}
	
	@Override
	public void replycountup(HttpServletRequest request) {
		String BID = request.getParameter("REPLYPARENT");
		Bdao.replycountup(BID);
	}
	@Override
	public List<BDto> androidMySaleList(HttpServletRequest request) {
		String BNAME = request.getParameter("BNAME");
		List<BDto> dtos = Bdao.androidMySaleList(BNAME);
		return dtos;
	}
	
}
